---
- name: Install dependent packages.
  apt:
    name: "{{ item }}"
    update_cache: true
    cache_valid_time: 86400
  with_items:
    - gnupg2
    - python3-pip

- name: Install dependent packages.
  pip:
    name:
      - python-swiftclient
      - python-keystoneclient

# from https://github.com/vkill/ansible-role-gpg_key/blob/c5ed54c6eb15873831bb91d5128af20560b8b25d/tasks/common.yml
- name: "Ensure ~/.gnupg config directory exists with right permissions"
  file:
    dest: "~/.gnupg"
    state: directory
    mode: 0700
  become: yes
  become_user: "{{ backup_user }}"

- name: Set gpg pinentry mode to loopback in config file.
  lineinfile:
    dest: "~/.gnupg/gpg.conf"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    create: yes
  with_items:
    - line: "use-agent"
      regexp: "^use-agent"
    - line: "pinentry-mode loopback"
      regexp: "^pinentry-mode"
  become: yes
  become_user: "{{ backup_user }}"

- name: Set gpg-agent config file to allow loopback pinentry.
  lineinfile:
    dest: "~/.gnupg/gpg-agent.conf"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
    create: yes
  with_items:
    - line: "allow-loopback-pinentry"
      regexp: "^allow-loopback-pinentry"
  become: yes
  become_user: "{{ backup_user }}"

# from https://github.com/vkill/ansible-role-gpg_key/blob/1611269318ecfad8839a711f1f7d1d24db8b70fd/tasks/import.yml
- name: Copy local public key to remote
  copy:
    dest: "~/.gnupg/tmp_public_key"
    src: "{{ inventory_dir }}/../../public_keys/{{ inventory_dir | basename }}/backup_gpg_key.pub.asc"
    mode: 0700
  become: yes
  become_user: "{{ backup_user }}"

- name: Import specified public key
  command: "gpg2 --import '.gnupg/tmp_public_key'"
  args:
    chdir: "~"
  become: yes
  become_user: "{{ backup_user }}"

- name: Shred tmp file
  command: "shred -u -z '.gnupg/tmp_public_key'"
  args:
    chdir: "~"
  become: yes
  become_user: "{{ backup_user }}"

- name: install backup script
  template:
    dest: "~/{{ store_identifier | basename }}-backup.sh"
    src: backup.sh.j2
    mode: 0700
  become: yes
  become_user: "{{ backup_user }}"
  vars:
    backup_params:
      postgresql:
        command: "pg_dump --clean --format=custom"
        backup_file_prefix: "pg_dump_"
        backup_file_extension: "sql"
      file:
        command: "tar --create --gzip --absolute-names"
        backup_file_prefix: "archive_"
        backup_file_extension: "tar.gz"

- name: setup scheduled backup with crontask
  cron:
    name: "{{ openstack_container_name }}"
    minute: "0"
    weekday: "{{ label_to_weekday_dict[frequency] }}"
    hour: "2" # the job should run every days at 2 AM
    user: "{{ backup_user }}"
    job: "./{{ store_identifier | basename }}-backup.sh >> {{ store_identifier | basename }}-backup.log 2>&1"
  vars:
    label_to_weekday_dict:
      weekly: "0"
      daily: "*"
  become: yes
  become_user: "{{ backup_user }}"
